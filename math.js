// This function calculates the factorial of a number. function factorial(n) { if (n === 0) { return 1; } else { return n * factorial(n - 1); } } // This function calculates the binomial coefficient of n over k. function binomialCoefficient(n, k) { if (k > n || k < 0) { return 0; } else { return factorial(n) / (factorial(k) * factorial(n - k)); } } // This function calculates the sum of a series. function sum(series, n) { var sum = 0; for (var i = 0; i < n; i++) { sum += series[i]; } return sum; } // This function calculates the integral of a function. function integral(f, a, b) { var h = (b - a) / 1000; var sum = 0; for (var i = 0; i < 1000; i++) { sum += f(a + i * h) * h; } return sum; } // This function solves a system of linear equations. function solveLinearEquations(a, b) { var n = a.length; var x = new Array(n); for (var i = 0; i < n; i++) { x[i] = b[i] / a[i][i]; } return x; } return x; } // This function solves a differential equation. function solveDifferentialEquation(f, y0, t0, t1) { var h = (t1 - t0) / 1000; var y = new Array(1000); y[0] = y0; for (var i = 1; i < 1000; i++) { y[i] = y[i - 1] + h * f(y[i - 1], t0 + i * h); } return y; } function combinations(n, r) { // Check if n and r are valid if (n < 0 || r < 0 || r > n) { return 0; } // Calculate the factorials of n and r var nFact = factorial(n); var rFact = factorial(r); var nMinusRFact = factorial(n - r); // Calculate the combination return nFact / (rFact * nMinusRFact); } // Calculate the factorial of a number function factorial(n) { var result = 1; for (var i = 2; i <= n; i++) { result *= i; } function combination(n, r) { if (n < 0 || r < 0 || r > n) { return 0; } var numerator = 1; for (var i = 0; i < r; i++) { numerator *= (n - i); } var denominator = 1; for (var i = 1; i <= r; i++) { denominator *= i; } } return numerator / denominator; } function factorial(n) { if (n < 0) { return 0; } var result = 1; for (var i = 1; i <= n; i++) { result *= i; } return result; } function nCr(n, r) { return combination(n, r) / factorial(r); }